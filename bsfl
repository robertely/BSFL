#!/usr/bin/env python3
"""
For simple orchestration of tasts across large enviroments.
Specifically for wrapping rsync and ssh for massively parrell operation.
"""

import os
import subprocess
import argparse
import logging
from pprint import pprint
import utils.conf as conf
# flirps
import time


class plugin_step(object):
    """
    Wrapper for shelling out to a step plugin
    """
    password_req_prmt = 'password:'
    sudo_req_prmt = '[sudo] password'

    def __init__(self, name='', path='', prefix='bsfl_'):
        self.step_full_path = path + prefix + name
        self.status = 'Initialized'
        # TODO: Support option for binary logs
        self.stdout = []
        self.stderr = []
        self.exit_code = None

    def start(self):
        self.status = 'Starting'
        self.step_proc = subprocess.Popen(self.step_full_path,
                                          shell=True,
                                          bufsize=1,
                                          universal_newlines=True,
                                          stdout=subprocess.PIPE,
                                          stderr=subprocess.PIPE)

    def stop(self):
        self.status = 'Stopping'
        self.step_proc.terminate()

    def std_buff_flush(self):
        for line in self.step_proc.stdout:
            print('got', line.rstrip("\n"))
            self.stdout.append(line.rstrip("\n"))


    def poll(self):
        if self.step_proc.poll() is not None:
            self.exit_code = self.step_proc.poll()
            self.status = 'Stopped'
        else:
            self.status = 'Running'


if __name__ == '__main__':
    # Setup argparse
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument('configFile', metavar='/path/to/job.yaml', type=argparse.FileType('r'), help='Path to job yaml file')
    parser.add_argument('-v', '--verbose', help='increase output verbosity', action='store_true')
    args = parser.parse_args()

    # Setup logging
    # TODO: setup log formater
    if args.verbose:
        logging.basicConfig(level=logging.DEBUG)

    # Load workingConfig
    workingConfig = conf.parse(args.configFile)
    # Lint workingConfig
    conf.lint(workingConfig)

    # ---

    x = plugin_step(name='beep', path='step_plugins/')

    print('STARTING ---')
    x.start()

    print('flushing buffer ---')
    x.std_buff_flush()

    print('SLEEPING ---')
    time.sleep(5)

    print('flushing buffer ---')
    x.std_buff_flush()

    print('printing stdin')
    pprint(x.stdout)
